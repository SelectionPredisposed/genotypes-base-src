import os

# Runtime variables
include: "variables.py"

rule all:
    input:
        # merge_vcf
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz'), chr=chromx),
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz.tbi'), chr=chromx),
        # vcf_to_bgen
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{chr}.bgen'), chr=chromx),
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{chr}.sample'), chr=chromx),
        # vcf_to_bed
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'plink', '{chr}.{ext}'), ext=['bed','bim','fam'], chr=chromx)
        #expand(config['output_base'] + 'genotyped/allbatch_genotyped/{chr}.vcf.gz', chr=chromx),
        #expand(config['output_base'] + 'genotyped/allbatch_genotyped/merged/autosomes.{ext}', ext=['bed','bim','fam']),
        #expand(config['output_base'] + 'genotyped/allbatch_genotyped/bedset/{chr}.{ext}', chr=chrom, ext=['bed','bim','fam']),
        #expand(config['output_base'] + 'imputed/common-bedset/merge/allchr-imputed-common.{ext}', ext=['bed','bim','fam']),

# merge full imputed VCFs: HARVEST12, HARVEST24, ROT1, ROT2, TED, NORMENT1 (FEB18, MAY16, JAN15, JUN15)
rule merge_vcf:
    input:
        harvest12=os.path.join(config['harvest12_base_imputed'], "{chr}.vcf.gz"),
        harvest24=os.path.join(config['harvest24_base_imputed'], "{chr}.vcf.gz"),
        rot1=os.path.join(config['rot1_base_imputed'], "{chr}.vcf.gz"),
        rot2=os.path.join(config['rot2_base_imputed'], "{chr}.vcf.gz"),
        ted=os.path.join(config['ted_base_imputed'], "{chr}.vcf.gz"),
        feb18=os.path.join(config['feb18_base_imputed'], "{chr}.vcf.gz"),
        may16=os.path.join(config['may16_base_imputed'], "{chr}.vcf.gz"),
        jun15=os.path.join(config['jun15_base_imputed'], "{chr}.vcf.gz"),
        jan15=os.path.join(config['jan15_base_imputed'], "{chr}.vcf.gz")
    output:
        vcf=os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz'),
        tbi=os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz.tbi')
    params:
        bcftools=bcftools,
        mergefile=os.path.join(tmpdir,'{chr}-mergelist')
    shell:
        """
        # Make mergefile before merging per chromosome
        echo {input.harvest12} > {params.mergefile}
        echo {input.harvest24} >> {params.mergefile}
        echo {input.rot1} >> {params.mergefile}
        echo {input.rot2} >> {params.mergefile}
        echo {input.ted} >> {params.mergefile}
        echo {input.feb18} >> {params.mergefile}
        echo {input.may16} >> {params.mergefile}
        echo {input.jun15} >> {params.mergefile}
        echo {input.jan15} >> {params.mergefile}

        {params.bcftools} merge --file-list {params.mergefile} --info-rules INFO:avg -o {output.vcf} -Oz
        tabix -f {output.vcf}
        """

### Convert vcf to bgen 1.2.
# First phasing info has to be removed from the vcf. Convert vcf to pgen first, then
# convert pgen to bgen. vcf_to_pgen needs to be run sequentially.
rule vcf_to_pgen:
    input:
        vcf=os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz')
    output:
        pgen=expand(os.path.join(config['tmp_path'], 'plinkout_unphased{{chr}}.{ext}'), ext=['pgen','psam','pvar'])
        #bgen=os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{chr}.bgen'),
        #sample=os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{chr}.sample')
    params:
        pgenprefix=os.path.join(config['tmp_path'], 'plinkout_unphased{chr}')
    threads: 30
    shell:
        """

        # Erase phase from VCF before converting to bgen to avoid problems in BOLT-LMM 2.3.2
        # double-id sets FID to IID when converting to bgen
        plink2 \
            --vcf {input.vcf} dosage=DS \
            --double-id \
            --make-pgen erase-phase \
            --out {params.pgenprefix}
        """

# Convert unphased to bgen
rule pgen_to_bgen:
    input:
        pgen=expand(os.path.join(config['tmp_path'], 'plinkout_unphased{{chr}}.{ext}'), ext=['pgen','psam','pvar'])
    output:
        bgen=expand(os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{{chr}}.{ext}'), ext=['bgen','sample'])
    params:
        pgenprefix=os.path.join(config['tmp_path'], 'plinkout_unphased{chr}'),
        bgenprefix=os.path.join(config['output_base'], 'imputed', 'all', 'bgen', '{chr}')
    threads: 30
    shell:
        """

        plink2 \
            --pfile {params.pgenprefix} \
            --export bgen-1.2 ref-first bits=8 id-paste=iid id-delim='-' \
            --out {params.bgenprefix}
        """

# Convert vcf to dosage (BOLT-LMM format)
# rule vcf_to_dosage:
#     input:
#         vcf=os.path.join(config['output_base'], 'imputed', 'all' , '{chr}.vcf.gz')
#     output:
#         sample=os.path.join(config['output_base'], 'imputed', 'all', 'dosage', '{chr}.sample'),
#         dosage=os.path.join(config['output_base'], 'imputed', 'all', 'dosage', '{chr}.dosage.gz')
#     params:
#     shell:
#         """
#         # Convert VCF to gzipped dosage format compatible with BOLT-LMM
#         bcftools query -f '%ID %CHROM %POS %ALT %REF [ %DS ]' {input.vcf} | gzip > {output.dosage}
#
#         # Output corresponding sample file
#         bcftools query -l {input.vcf} > {output.sample}
#         """

# merge common bedset: HARVEST with ROT1
# rule merge_common_bedset:
#     input:
#         harvest=expand('/mnt/archive/HARVEST/genotypes-base/imputed/common-bedset/merge/allchr-imputed-common.{ext}', ext=['bed','bim','fam']),
#         rot1=expand('/mnt/archive/ROTTERDAM1/genotypes-base/imputed/common-bedset/merge/allchr-imputed-common.{ext}', ext=['bed','bim','fam'])
#     output:
#         outbed=expand(config['output_base'] + 'imputed/common-bedset/merge/allchr-imputed-common.{ext}', ext=['bed','bim','fam'])
#     params:
#         inharvest='/mnt/archive/HARVEST/genotypes-base/imputed/common-bedset/merge/allchr-imputed-common',
#         inrot1='/mnt/archive/ROTTERDAM1/genotypes-base/imputed/common-bedset/merge/allchr-imputed-common',
#         outbed=config['output_base'] + 'imputed/common-bedset/merge/allchr-imputed-common',
#         tmp=config['tmp_path']
#     shell:
#         """
#         plink \
#             --bfile {params.inharvest} \
#             --bmerge {params.inrot1} \
#             --merge-mode 4 \
#             --out {params.tmp}triallelic || true
#
#         plink \
#             --bfile {params.inharvest} \
#             --exclude {params.tmp}triallelic.missnp \
#             --make-bed \
#             --out {params.tmp}harvest_biallelic_only
#
#         plink \
#             --bfile {params.inrot1} \
#             --exclude {params.tmp}triallelic.missnp \
#             --make-bed \
#             --out {params.tmp}rot1_biallelic_only
#         
#         plink \
#             --bfile {params.tmp}harvest_biallelic_only \
#             --bmerge {params.tmp}rot1_biallelic_only \
#             --merge-mode 4 \
#             --out {params.outbed}
#         """


# remove samples with too high IBD across batches
# rule ibd_prune_core_offspring:
#     input:
#         harvest_core_offspring=config['core_offspring_harvest'],
#         rot1_core_offspring=config['core_offspring_rot1']
#     output:
#     params:
#     shell:
#         """
#         # Merge the core lists
#         cat {input.harvest_core_offspring} {input.rot1_core_offspring} > {tmp}
#         """

# filter out genotyped markers from merged set
# TYPED + INFO=1 equals all markers genotyped across batches
# TODO: Change this to use the slower BCFtools filtering instead. The grep approach
# does not output VCF standards compliant files
rule filter_genotyped:
    input:
        vcf=config['output_base'] + 'imputed/all/{chr}.vcf.gz',
        tbi=config['output_base'] + 'imputed/all/{chr}.vcf.gz.tbi'
    output:
        vcf=config['output_base'] + 'genotyped/allbatch_genotyped/{chr}.vcf.gz'
    params:
    shell:
        """
        # Get the header of the VCF
        # The || forces command to return true. Needed since command sends a 141 (sigpipe) error
        # due to open file handle (probably) - dirty hack to prevent having to wait for full read of file
        zcat {input.vcf} | head -n150 | grep "^#" | gzip > {output.vcf} || true

        # Filter markers with TYPED & INFO=1 in INFO field
        zcat {input.vcf} | grep -v "^#" | grep "TYPED" | gzip >> {output.vcf}

        """

# Convert full VCF to bedsets
rule vcf_to_bed:
    input:
        vcf=os.path.join(config['output_base'], 'imputed', 'all', 'vcf', '{chr}.vcf.gz')
    output:
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'plink', '{{chr}}.{ext}'), ext=['bed','bim','fam'])
    params:
        out_stem=os.path.join(config['output_base'], 'imputed', 'all', 'plink', '{chr}')
    shell:
        """
        plink \
            --vcf {input.vcf} \
            --double-id \
            --make-bed \
            --out {params.out_stem}
        """

# generate filelist before merging bedsets
rule generate_merge_filelist:
    input:
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'plink', '{chr}.{ext}'), chr=chromx, ext=['bed','bim','fam'])
    output:
        os.path.join(config['tmp_path'], 'filelist_merge')
    params:
        expand(os.path.join(config['output_base'], 'imputed', 'all', 'plink', '{chr}'), chr=chromx)
    run:

        f = open(output[0], 'w')

        for item in params[0]:
            f.write("%s\n" % item)

# merge filtered vcfs
rule merge_bedsets:
    input:
        os.path.join(config['tmp_path'], 'filelist_merge')
    output:
        #expand(os.path.join(config['output_base'], 'imputed', 'all', 'plink', 'mobagen.{ext}'), ext=['bed','bim','fam'])
        # temp folder due to disk space
        expand('/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen.{ext}', ext=['bed','bim','fam'])
    params:
        #outstem=os.path.join(config['output_base'], 'imputed', 'all', 'plink', 'mobagen')
        # temp due to disk space
        outstem='/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen'
    shell:
        """
        plink --merge-list {input} --merge-mode 4 --out {params.outstem}
        """

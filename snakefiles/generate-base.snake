# Config file and runtime variables
include: "variables.py"

# Catch all rule
rule all:
    input:
        expand(config['output_base'] + 'imputed/common/{chr}.vcf.gz', chr=chromx),
        expand(config['output_base'] + 'imputed/common-bedset/chr/{chr}-imputed-common' + '{ext}', ext=['.bed','.bim','.fam'], chr=chromx)


# Merge imputed autosomal chromosomes
if config['dataset']=='HARVEST':
    rule merge_imputed:
        input:
            imp12=config['imputed_m12_path'] + "{chr}.vcf.gz",
            imp24=config['imputed_m24_path'] + "{chr}.vcf.gz"
        output:
            vcf=config['tmp_path'] + 'imputed/merged/{chr}-merged.vcf.gz',
            tbi=config['tmp_path'] + 'imputed/merged/{chr}-merged.vcf.gz.tbi'
        params:
            bcftools=bcftools
        shell:
            """
            {params.bcftools} merge --info-rules INFO:avg -o {output.vcf} -Oz {input.imp12} {input.imp24}
            tabix -f {output.vcf}
        """

# split the dbsnp file containing all chr into one file per chr to parallel subsequent operations
rule split_dbsnp:
    input:
        dbsnp=config['dbsnp'] 
    output:
        config['tmp_path'] + 'dbsnp/chr{chr}-dbsnp.vcf.gz' 
    shell:
        """
        bcftools view -r {wildcards.chr} {input.dbsnp} -Oz -o {output}
        tabix -f {output}
        """

# annotate markers without rsID from dbSNP reference 
rule annotate_missing_rsids:
    input:
        dbsnp=config['tmp_path'] + 'dbsnp/chr{chr}-dbsnp.vcf.gz', 
        vcf=config['tmp_path'] + 'imputed/merged/{chr}-merged.vcf.gz' if config['dataset']=="HARVEST" else config['imputed_path'] + '{chr}.vcf.gz'
    output:
        vcf=config['tmp_path'] + 'imputed/dbsnp-update/{chr}-dbsnp.vcf.gz'
    shell:
        """
        bcftools annotate --annotations {input.dbsnp} --columns ID --output {output.vcf} --output-type z {input.vcf}
        """

# Convert rsids with dot-notation (unnamed) to format: chr<CHR>:<POSITION>_<REF>/<ALT>    
rule generate_unique_markers:
    input:
        config['tmp_path'] + 'imputed/dbsnp-update/{chr}-dbsnp.vcf.gz'
    output:
        config['output_base'] + 'imputed/all/{chr}.vcf.gz'
    shell:
        """
        zcat {input} | awk -v OFS='\t' '$0~/^#/{{print; next}} {{snp[$3]++}} $3=="."{{$3="chr"$1":"$2"_"$4"/"$5}} snp[$3]>1 {{$3=$3"_"snp[$3]}} {{print}}' | bgzip > {output}
        tabix -f {output}
        """

# Extract common markers
rule extract_common:
    input:
        config['output_base'] + 'imputed/all/{chr}.vcf.gz'
    output:
        config['output_base'] + 'imputed/common/{chr}.vcf.gz'
    params:
        vcftools=vcftools
    shell:
        """
        bcftools view -q 0.001:minor {input} -Oz -o {output}   
        tabix -f {output}
        """

# Convert common markerset to PLINK bed format
rule vcf_to_bed:
    input:
        config['output_base'] + 'imputed/common/{chr}.vcf.gz' 
    output:
        expand(config['output_base'] + 'imputed/common-bedset/chr/{{chr}}-imputed-common' + '{ext}', ext=['.bed','.bim','.fam'])
    params:
        config['output_base'] + 'imputed/common-bedset/chr/{chr}-imputed-common'
    shell:
        """
        plink \
            --vcf {input} \
            --double-id \
            --make-bed \
            --out {params}
        """

rule merge_bed_chr:
    input:
        expand(config['output_base'] + 'imputed/common-bedset/chr/{chr}-imputed-common' + '{ext}', ext=['.bed','.bim','.fam'], chr=chromx)
    output:
        lst=config['tmp_path'] + 'bedfile_list',
        bedset=expand(config['output_base'] + 'imputed/common-bedset/merge/allchr-imputed-common' + '{ext}', ext=['.bed','.bim','.fam'])
    params:
        tmp=config['tmp_path'],
        filelist=expand(config['output_base'] + 'imputed/common-bedset/chr/{chr}-imputed-common', chr=chromx),
        bedset=config['output_base'] + 'imputed/common-bedset/merge/allchr-imputed-common'
    shell:
        """
        echo {params.filelist} | tr ' ' '\n' > "{params.tmp}/bedfile_list"

        plink \
            --merge-list {params.tmp}/bedfile_list \
            --merge-mode 4 \
            --out {params.bedset}
        """
    

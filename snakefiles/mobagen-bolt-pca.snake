import os
# Runtime variables
include: "variables.py"


### OUTLINE ###
# Workflow calculates PCAs on HapMap samples before projecting all MobaGen samples onto the loadings.
# generates PCA covariates after merging with HapMap and for all MobaGen samples based PCA core + projection

rule all:
    input:
        # hapmap_pca
        os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_pcs'),
        # extract_hm_markers_mobagen
        expand(os.path.join(config['tmp_path'], 'pca','mobagen-hapmap-pc-subset.{ext}'), ext=('bed','bim','fam')),
        # project_pca_mobagen
        os.path.join(config['tmp_path'],'hm-mobagen-proj-pc'),
        # merge_pcas
        os.path.join(config['output_base'],'aux','pca', 'hapmap-mobagen', 'hapmap-mobagen-merged-pca'),
        # extract ethnic core
        os.path.join(config['output_base'], 'aux', 'pca', 'ethnic-core-samples'),
        # subset_ethnic_core_high_info
        expand(os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.{ext}'), ext=['bed','bim','fam']),
        # get_unrelated_ethnic_core
        os.path.join(config['output_base'], 'aux', 'pedigree', 'mobagen-ethnic-core-samples.kin0'),
        # generate_unrelated_ethnic_core
        os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core-related'),
        os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core-unrelated'),
        expand(os.path.join(config['tmp_path'],'pca','unrelated-ethnic-core.{ext}'), ext=['bed','bim','fam']),
        # generate_pca_ethnic_core
        os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_loadings'),
        # project_mobagen_on_unrelated_ethnic_core
        os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-total', 'mobagen-total-proj-pc'),
        # extract_grm_bolt
        expand(os.path.join(config['tmp_path'],'bolt','grm-high-quality.{ext}'), ext=['bed','bim','fam']),
        # prune_grm_bolt
        expand(os.path.join(config['output_base'],'imputed', 'subset', 'grm-high-quality-pruned', 'grm-high-quality-pruned.{ext}'), ext=['bed','bim','fam'])


# Perform PCA on Hapmap after subsetting markers. Markers used in the markerlist are markers that are both in HapMap and
# have been genotyped across all 8 batches in mobagen. Rule extracts markers, prunes and performs PCA on hapmap
# samples only.
rule hapmap_pca:
    input:
        hapmap_bedset=expand(config['hapmap_stem'] + '.{ext}', ext=['bed','bim','fam']),
        markerlist=os.path.join(resourcesdir, 'marker_chrom_allele_overlap_b36_b37_mobagen_genotyped.txt')
    output:
        hm_pcs=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_pcs'),
        hm_eigenvec=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_eigenvec'),
        hm_loadings=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_loadings'),
        hm_eigenval=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_eigenval'),
        hm_var_explained=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_var_explained'),
        hm_meansd=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_meansd'),
        markerlist=os.path.join(config['tmp_path'], 'hapmap-marker-extract.prune.in'),
        a1ref=os.path.join(config['tmp_path'], 'hapmap-pruned.bim')
    params:
        tmpdir=config['tmp_path'],
        hapmap_inbed_stem=config['hapmap_stem']
    shell:
        """
        # Subset markers
        plink \
            --bfile {params.hapmap_inbed_stem} \
            --autosome \
            --extract {input.markerlist} \
            --maf 0.01 \
            --indep-pairwise 100 50 0.1 \
            --out {tmpdir}/hapmap-marker-extract

        plink \
            --bfile {params.hapmap_inbed_stem} \
            --extract {tmpdir}/hapmap-marker-extract.prune.in \
            --make-bed \
            --out {tmpdir}/hapmap-pruned

        flashpca_x86-64 \
            --bfile {tmpdir}/hapmap-pruned \
            --outpc {output.hm_pcs} \
            --outvec  {output.hm_eigenvec} \
            --outload {output.hm_loadings} \
            --outval {output.hm_eigenval} \
            --outpve {output.hm_var_explained} \
            --outmeansd {output.hm_meansd}

        """

# Extract the same markers from mobagen as used in hapmap PC calculation. It is important for flashpca to have
# the exact same markers and reference alleles when doing the projection. --a1-allele is used to align alleles
# to match hapmap bedset.
# TODO: Move mobagen to correct location when enough space
rule extract_hm_markers_mobagen:
    input:
        bedset=expand('/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen.{ext}', ext=['bed','bim','fam']),
        markerlist=os.path.join(config['tmp_path'], 'hapmap-marker-extract.prune.in'),
        a1ref=os.path.join(config['tmp_path'], 'hapmap-pruned.bim')
    output:
        expand(os.path.join(config['tmp_path'],'pca','mobagen-hapmap-pc-subset.{ext}'), ext=['bed','bim','fam'])
    params:
        inbed_stem='/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen',
        outbed_stem=os.path.join(config['tmp_path'], 'pca', 'mobagen-hapmap-pc-subset')
    shell:
        """
        plink \
            --bfile {params.inbed_stem} \
            --extract {input.markerlist} \
            --a1-allele {input.a1ref} 5 2 \
            --make-bed \
            --out {params.outbed_stem}
        """

# Project all MobaGen samples onto hapmap loadings. Rule will output PCs for MobaGen only.
rule project_pca_mobagen:
    input:
        mobagen_inbed=expand(os.path.join(config['tmp_path'],'pca','mobagen-hapmap-pc-subset.{ext}'), ext=['bed','bim','fam']),
        hm_meansd=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_meansd'),
        hm_loadings=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_loadings')
    output:
        projections=os.path.join(config['tmp_path'],'hm-mobagen-proj-pc')
    params:
        mobagen_inbed_stem=os.path.join(config['tmp_path'],'pca','mobagen-hapmap-pc-subset')
    shell:
        """
        flashpca_x86-64 \
            --bfile {params.mobagen_inbed_stem} \
            --project \
            --inmeansd {input.hm_meansd} \
            --inload {input.hm_loadings} \
            --outproj {output.projections}
        """

# Merge HapMap PCs with Mobagen PCs. Explanation: HapMap PCAs are calculated together with the loadings.
# After projecting the mobagen pcas are available and cen be merged in.
rule merge_pcas:
    input:
        hapmap=os.path.join(config['output_base'], 'aux', 'pca', 'hapmap', 'hapmap_pcs'),
        mobagen=os.path.join(config['tmp_path'],'hm-mobagen-proj-pc')
    output:
        os.path.join(config['output_base'],'aux','pca', 'hapmap-mobagen', 'hapmap-mobagen-merged-pca')
    params:
    shell:
        """
        cat {input.hapmap} > {output}
        tail -n+2 {input.mobagen} >> {output}
        """

# For downstream BOLT-LMM analyses an ethnically homogeneous set of samples need to be extracted. Where to
# set the thresholds is somewhat arbitrary. Thresholds are hard coded in the workerscript. Associated plots
# are output post merging with HapMap with and without the ethnic core hihglighted. Note that the ethnic core
# will contain related samples.
rule extract_ethnic_core:
    input:
        script=os.path.join(libdir,'make-pca-plots-mobagen-hapmap.R'),
        pca=os.path.join(config['output_base'],'aux','pca', 'hapmap-mobagen', 'hapmap-mobagen-merged-pca'),
        poplist=os.path.join(resourcesdir, 'relationships_w_pops_121708.txt')
    output:
        ethnic_core=os.path.join(config['output_base'], 'aux', 'pca', 'ethnic-core-samples')
    params:
        output_path_hm=os.path.join(config['output_base'], 'aux', 'pca', 'hm/'),
        output_path_mobagen=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen/')
    shell:
        """
        # Make sure paths exist
        mkdir -p {params.output_path_hm}
        mkdir -p {params.output_path_mobagen}

        # Extract ethnic core
        Rscript {input.script} \
            {input.pca} \
            {input.poplist} \
            {params.output_path_hm} \
            {params.output_path_mobagen} \
            {output.ethnic_core}
        """

# Subset ethnic core samples and markers with high INFO score. The markers included in this analyses are
# markers with an aggregated INFO score > 0.999 and MAF 1% (from HRC reference panel).
# The subset is used to (in subsequent rules):
# 1. run relatedness inference to extract only unrelated samples in the ethnic core
# 2. calculate PCs on unrelated ethnic core samples
# 3. project all MobaGen samples in ethnic on the loadings generated in step 2)
rule subset_ethnic_core_high_info:
    input:
        bedset=expand('/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen.{ext}', ext=['bed','bim','fam']),
        markergz='/mnt/archive/MOBAGENETICS/genotypes-base/aux/markerinfo/all-markerinfo.gz',
        ethnic_core=os.path.join(config['output_base'], 'aux', 'pca', 'ethnic-core-samples')
    output:
        expand(os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.{ext}'), ext=['bed','bim','fam'])
    params:
        inbed_stem='/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen',
        outbed_stem_core=os.path.join(config['tmp_path'], 'pca', 'mobagen-high-info-core')
    shell:
        """
        zcat {input.markergz} | awk '$7 > 0.999 && $8 > 0.01 {{print $3}}' > {tmpdir}/markers

        # Make two column plink extract list
        awk '{{print $1" "$1}}' {input.ethnic_core} > {tmpdir}/ethnic_core_plink

        # Extract samples in ethnic core - used to generate pca loadings
        plink2 \
            --bfile {params.inbed_stem} \
            --extract {tmpdir}/markers \
            --keep {tmpdir}/ethnic_core_plink \
            --make-bed \
            --out {params.outbed_stem_core}

        """

# Run pedigree inference in ethnic core to find unrelated samples
rule get_unrelated_ethnic_core:
    input:
       bedset=expand(os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.{ext}'), ext=['bed','bim','fam'])
    output:
       os.path.join(config['output_base'], 'aux', 'pedigree', 'mobagen-ethnic-core-samples.kin0')
    params:
        king_bed=os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.bed'),
        king_output_prefix=os.path.join(config['output_base'], 'aux', 'pedigree', 'mobagen-ethnic-core-samples')
    shell:
        """
        king -b {params.king_bed} --related --degree 3 --cpus 32 --prefix {params.king_output_prefix}
        """

# Extract unrelated samples in ethnic core
rule generate_unrelated_ethnic_core:
    input:
        bedset=expand(os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.{ext}'), ext=['bed','bim','fam']),
        kinship=os.path.join(config['output_base'], 'aux', 'pedigree', 'mobagen-ethnic-core-samples.kin0')
    output:
        related_ethnic_core=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core-related'),
        unrelated_ethnic_core=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core-unrelated'),
        bedset=expand(os.path.join(config['tmp_path'],'pca','unrelated-ethnic-core.{ext}'), ext=['bed','bim','fam'])
    params:
        bedstem_in=os.path.join(config['tmp_path'],'pca','mobagen-high-info-core'),
        bedstem_out=os.path.join(config['tmp_path'],'pca','unrelated-ethnic-core')
    shell:
        """
        # Get a list of the related samples to remove from the ethnic core. NB Need a two step approach because the kinship
        # file does not contain all samples. First find samples to exclude, then those to include
        # To exclude
        tail -n+2 {input.kinship} | awk '$14 !="UN" {{print $2" "$2}}' | awk '!seen[$0]++' > {output.related_ethnic_core}

        # To include:
        awk 'NR==FNR{{a[$1]; next}} !($2 in a){{print $2" "$2}}' {output.related_ethnic_core} {params.bedstem_in}.fam > {output.unrelated_ethnic_core}

        # Remove related samples from bedset
        plink \
            --bfile {params.bedstem_in} \
            --keep {output.unrelated_ethnic_core} \
            --make-bed \
            --out {params.bedstem_out}

        """

# Calculate PCs in unrelated ethnic core
rule generate_pca_ethnic_core:
    input:
        expand(os.path.join(config['tmp_path'],'pca','unrelated-ethnic-core.{ext}'), ext=['bed','bim','fam'])
    output:
        mg_pcs=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_pcs'),
        mg_eigenvec=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_eigenvec'),
        mg_loadings=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_loadings'),
        mg_eigenval=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_eigenval'),
        mg_var_explained=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_var_explained'),
        mg_meansd=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_meansd'),
        pruned_bim=os.path.join(config['tmp_path'], 'unrelated-ethnic-core-pruned.bim')
    params:
        bedstem_in=os.path.join(config['tmp_path'],'pca','unrelated-ethnic-core')
    shell:
        """
        # Prune ethnic core
        plink \
            --bfile {params.bedstem_in} \
            --autosome \
            --maf 0.01 \
            --indep-pairwise 100 50 0.1 \
            --out {tmpdir}/unrelated-ethnic-core

        plink \
            --bfile {params.bedstem_in} \
            --extract {tmpdir}/unrelated-ethnic-core.prune.in \
            --make-bed \
            --out {tmpdir}/unrelated-ethnic-core-pruned

        flashpca_x86-64 \
            --bfile {tmpdir}/unrelated-ethnic-core-pruned \
            --outpc {output.mg_pcs} \
            --outvec  {output.mg_eigenvec} \
            --outload {output.mg_loadings} \
            --outval {output.mg_eigenval} \
            --outpve {output.mg_var_explained} \
            --outmeansd {output.mg_meansd}

        """

# Project all samples in mobagen ethnic core on loadings from unrelated ethnic core. This rule generates the PCs
# for use as covariates in downstream analyses.
rule project_mobagen_on_unrelated_ethnic_core:
    input:
        expand(os.path.join(config['tmp_path'],'pca','mobagen-high-info-core.{ext}'), ext=['bed','bim','fam']),
        pruned_bim=os.path.join(config['tmp_path'], 'unrelated-ethnic-core-pruned.bim'),
        mg_meansd=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_meansd'),
        mg_loadings=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-ethnic-core', 'mobagen_loadings')
    output:
        projections=os.path.join(config['output_base'], 'aux', 'pca', 'mobagen-total', 'mobagen-total-proj-pc')
    params:
        bedstem_in=os.path.join(config['tmp_path'],'pca','mobagen-high-info-core')
    shell:
        """
        # Extract the same markers for mobagen as remained after pruning unrelated ethnic core
        awk '{{print $2}}' {input.pruned_bim} > {tmpdir}/markerlist-unrelated-ethnic-core-pruned

        # Extract markers from whole mobagen
        plink \
            --bfile {params.bedstem_in} \
            --extract {tmpdir}/markerlist-unrelated-ethnic-core-pruned \
            --a1-allele {input.pruned_bim} 5 2 \
            --make-bed \
            --out {tmpdir}/mobagen-total-markerlist-extracted

        flashpca_x86-64 \
            --bfile {tmpdir}/mobagen-total-markerlist-extracted \
            --project \
            --inmeansd {input.mg_meansd} \
            --inload {input.mg_loadings} \
            --outproj {output.projections}
        """


# BOLT needs a set of high quality markers for generating the GRM. Markers with aggregated INFO score > 0.99 is
# extracted and pruned in the next rule down to approx 500K markers (as per BOLT docs).
rule extract_grm_bolt:
    input:
        bedset=expand('/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen.{ext}', ext=['bed','bim','fam']),
        markergz='/mnt/archive/MOBAGENETICS/genotypes-base/aux/markerinfo/all-markerinfo.gz',
        ethnic_core=os.path.join(config['output_base'], 'aux', 'pca', 'ethnic-core-samples')
    output:
        expand(os.path.join(config['tmp_path'],'bolt','grm-high-quality.{ext}'), ext=['bed','bim','fam'])
    params:
        input_stem='/mnt/work/helgeland/MOBAGENETICS/genotypes-base/imputed/all/plink-merge/mobagen',
        output_stem=os.path.join(config['tmp_path'],'bolt','grm-high-quality')
    shell:
        """
        # Extract markers  use in bolt GRM
        zcat {input.markergz} | awk '$7 > 0.99 {{print $3}}' > {tmpdir}/grm-markers

        # Extract markers
        plink2 \
            --bfile {params.input_stem} \
            --extract {tmpdir}/grm-markers \
            --make-bed \
            --out {params.output_stem}
        """

# Prune markers down to approximately 500k
rule prune_grm_bolt:
    input:
        bedset=expand(os.path.join(config['tmp_path'],'bolt','grm-high-quality.{ext}'), ext=['bed','bim','fam'])
    output:
        bedset=expand(os.path.join(config['output_base'],'imputed', 'subset', 'grm-high-quality-pruned', 'grm-high-quality-pruned.{ext}'), ext=['bed','bim','fam'])
    params:
        inbed_stem=os.path.join(config['tmp_path'],'bolt','grm-high-quality'),
        outbed_stem=os.path.join(config['output_base'], 'imputed', 'subset', 'grm-high-quality-pruned', 'grm-high-quality-pruned')
    shell:
        """
        plink2 \
            --bfile {params.inbed_stem} \
            --indep-pairwise 50 5 0.9 \
            --out {tmpdir}/bolt-grm-prune

        plink2 \
            --bfile {params.inbed_stem} \
            --extract {tmpdir}/bolt-grm-prune.prune.in \
            --make-bed \
            --out {params.outbed_stem}

        """

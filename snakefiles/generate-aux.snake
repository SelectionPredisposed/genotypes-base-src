import os

include: "variables.py"

chrom = list(range(1,23))

rule all:
    input:
        expand(config['output_base'] + 'aux/vcf-sample-order/vcf-sample-order', chr=chromx),
 #       expand(config['output_base'] + 'aux/dot-markers/chr{chr}-dot-markers', chr=chromx),
        expand(config['output_base'] + 'aux/markerinfo/{chr}-markerinfo', chr=chromx)
        #os.path.join(config['output_base'], 'pca', 'harvestpca.pca.evec')

# TODO : enable and run this during the pipeline as it uses TEMP files
# Extract lists of all markers with dot-notation in original vcfs (those that came back from imputation server)
# These markers have been updated with rsIDs from dbSNP. Should not be a problem but
# tracking these to make sure
#rule get_dot_notation_list:
#   input:
#       vcf=config['tmp_path'] + 'imputed/merged/{chr}-merged.vcf.gz' if config['dataset']=="HARVEST" else config['imputed_path'] + '{chr}.vcf.gz'
#   output:
#       dot_list=config['output_base'] + 'aux/dot-markers/chr{chr}-dot-markers'
#   shell:
#       """
#       zcat {input.vcf} | awk '$0~/^#/{{next}} $3=="." {{print "chr"$1":"$2"_"$4"/"$5}}' > {output.dot_list}
#       """

# Extracts marker information from VCF files (performed after updating to dbSNP rsid and suffixing duplicate rsids)
# Performed per chr
rule extract_marker_info:
    input:
        vcf=config['output_base'] + 'imputed/all/{chr}.vcf.gz' 
    output:
        markerinfo=config['output_base'] + 'aux/markerinfo/{chr}-markerinfo'
    shell:
        """
        bcftools query -H -f '%CHROM\t%POS\t%ID\t%REF\t%ALT\t%INFO/TYPED\t%INFO/INFO\t%INFO/RefPanelAF\n' {input.vcf} > {output.markerinfo}
        """

# Merge markerinfo files
rule merge_marker_info:
    input:
        expand(config['output_base'] + 'aux/markerinfo/{chr}-markerinfo', chr=chromx)
    output:
        config['output_base'] + 'aux/markerinfo/all-markerinfo'
    shell:
        """
        # Get header from first file
        HEADER="FALSE"
        for i in {input}
        do
            if [ "$HEADER" == "FALSE" ]
            then
                # fix header by removing #, numbered prefix and leading whitespace
                head -n1 $i | sed 's/#//' | sed 's/\[[0-9]\]//g' | sed 's/^ //' > {output}
                HEADER="TRUE"
            fi
        
            tail -n+2 $i >> {output}
        done
        """

# Extracts order of samples in the VCF file
# The sample order is the same for all files, chr1 used to fetch list
# NB: This is not the case for X markers for Harvest that have slightly less samples
rule extract_sample_order:
    input:
        vcf=config['output_base'] + 'imputed/all/1.vcf.gz'
    output:
        config['output_base'] + 'aux/vcf-sample-order/vcf-sample-order'
    shell:
        """
        bcftools query -l {input.vcf} > {output}
        """

# Generates LMM core for HARVEST as this was not done during QC (as in Rot1 onwards)
rule generate_lmm_core:
    input:
        geno=expand(os.path.join(config['output_base'], 'genotyped', 'merged', 'moba-qc-merge.{ext}'), ext=['bed','bim','fam'])
    output:
        pca=os.path.join(config['output_base'], 'pca', 'harvestpca.pca.evec')
    params:
        genostem=os.path.join(config['output_base'], 'genotyped', 'merged', 'moba-qc-merge'),
        pcastem=os.path.join(config['output_base'], 'pca', 'harvestpca') 
    shell:
        """
        # create convertf param file
        source {libdir}/pca_functions.sh
        
        plink \
            --bfile {params.genostem} \
            --autosome \
            --make-founders \
            --indep-pairwise 200 100 0.2 \
            --out {tmpdir}/prune_markers_tmp


        plink \
            --bfile {params.genostem} \
            --extract {tmpdir}/prune_markers_tmp.prune.in \
            --make-bed \
            --out {tmpdir}/genotyped_pruned

        pca \
            {tmpdir}/genotyped_pruned \
            {params.pcastem} \
            {tmpdir}

        """
